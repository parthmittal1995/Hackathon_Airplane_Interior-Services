# -*- coding: utf-8 -*-
"""masterdata.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1PolZMD5ooVOgncvZN8xrJjTa65nITy1s
"""

from google.colab import drive
drive.mount('/content/drive')

import numpy as np
import pandas as pd
import csv
from tqdm import tqdm
import regex as re
!pip install dateparser 
import dateparser 


DATA_AQ_SEAT = '/content/drive/Shareddrives/Hackathon/Data/AirlineQuality.com/AQ_seat_reviews.csv'
DATA_AQ_AIRLINE = '/content/drive/Shareddrives/Hackathon/Data/AirlineQuality.com/AQ_airlines_reviews.csv'
DATA_TA = '/content/drive/Shareddrives/Hackathon/Data/TripAdvisor.com/TripAdvisor_Reviews.csv'
DATA_SG = '/content/drive/Shareddrives/Hackathon/Data/SeatGuru.com/SeatGuru_reviews_uncleaned.csv'
DATA_ST = '/content/drive/Shareddrives/Hackathon/Data/Skytrax11/skytrax_scraping.csv'
OUTFILE = '/content/drive/Shareddrives/Hackathon/Data/master.csv'

#AirQuality - Airlines
AQA = pd.read_csv(DATA_AQ_AIRLINE, usecols=[1,2,3,4,5,6,])
AQA.columns = ['airline', 'title', 'date', 'review', 'rating', 'class']
AQA['source'] = 'AQ-A'
AQA['date'] = AQA['date'].apply(lambda x: dateparser.parse(x)) 
AQA.drop_duplicates(inplace = True)
AQA.head()

# AirQuality - Seats
AQS = pd.read_csv(DATA_AQ_SEAT, usecols=[1,2,3,4,5,6,7,8])
AQS.columns = ['airline', 'title', 'date', 'review', 'rating', 'class', 'aircraft', 'layout']
AQS['source'] = 'AQ-S'
AQS.drop_duplicates(inplace = True)
AQS['date'] = AQS['date'].apply(lambda x: dateparser.parse(x)) 
AQS.head()

#TripAdvisor 
TA= pd.read_csv(DATA_TA)
TA.columns = ['title', 'date', 'rating', 'review', 'route', 'region', 'class', 'airline']
TA['source'] = 'TA'
TA.drop_duplicates(inplace = True)
TA['date'] = TA['date'].apply(lambda x: dateparser.parse(str(x))) 
TA.head()

#SeatGuru
SG = pd.read_csv(DATA_SG,usecols=[1,3,5,6])

#Reading date and seat data separately from the csv
date = []
with open(DATA_SG, newline='\n') as csvfile:
    reader = csv.reader(csvfile, delimiter=',', quotechar='"')
    for i, row in tqdm(enumerate(reader)):
        if i == 0:
            # skip first line as it is the file header (columns)
            continue 
        date.append(row[5]) # unpack the row's data
SG['date'] = ""
SG['seat'] = ""
#splitting the data to extract date and seat, adding them as new columns to the data frame
for i in range(len(date)):
  a = date[i].replace(' ', "")
  temp = re.split('\n|for|Seat', a)
  SG['date'][i] = temp[1]
  if(len(temp)>2):
    SG['seat'][i] = temp[3]

SG = SG.iloc[:,[0,1,3,4,5]]
SG.columns = ['airline','aircraft','review','date','seat']
SG.drop_duplicates(inplace = True)
SG['date'] = SG['date'].apply(lambda x: dateparser.parse(str(x))) 
SG['source'] = 'SG'
SG.head()

#SkyTrax
ST = pd.read_csv(DATA_ST).drop(['Unnamed: 0','number_of_reviews'],axis=1)
ST.columns = ['region', 'date', 'rating', 'title', 'review','aircraft', 'class', 'airline']
ST.drop_duplicates(inplace = True)
ST['source'] = 'ST'
ST['date'] = ST['date'].apply(lambda x: dateparser.parse(str(x))) 
ST.head()

# Merging all the datasets
full_df = pd.concat([ST,TA,SG,AQA,AQS], axis=0, ignore_index=True)

#airlines jargons
def replace_text(replace_this, to ):
  full_df['review'] = full_df['review'].apply(lambda x: x.lower().replace(replace_this, to ))

#frequent bigrams  
replace_list = [('leg room','legroom'),('business class','businessclass'),('economy class','economyclass')
,('premium class','premiumclass'),('cabin crew','cabincrew'),('customer service','customerservice')
,('flight attendants','flightattendants'),('flight delayed','flightdelayed'),('return flight','returnflight')
,('in flight entertainment','inflightentertainment'),('connecting flight','connectingflight'),('flight time','flighttime')
,('economy class','economyclass'),('in-flight entertainment','inflightentertainment'),('premium economy','premiumeconomy')
,('flight attendant','flightattendant'),('inflight entertainment','inflightentertainment'),('flight cancelled','flightcancelled')
,('long haul','longhaul'),('ground staff','groundstaff'),('boarding pass','boardingpass'),('flight crew','flightcrew'),('low cost','lowcost')
,('flights time','flightstime'),('flight entertainment','flightentertainment'),('staff friendly','stafffriendly'),('crew friendly','crewfriendly')
,('booked flight','bookedflight'),('los angeles',''),('short flight','shortflight'),('good service','goodservice'),('good flight','goodflight')
,('abu dhabi',''),('cabin staff','cabinstaff'),('kuala lumpur',''),('las vegas',''),('round trip','roundtrip'),('window seat','windowseat')
,('boarding passes','boardingpasses'),('hand luggage','handluggage'),('exit row','exitrow'),('hour delay','hourdelay'),('arrived time','arrivedtime')
,('good food','goodfood'),('san francisco',''),('food drinks','fooddrinks'),('departure time','departuretime'),('online check in','onlinecheckin')
,('cancelled flight','cancelledflight'),('online checkin','onlinecheckin'),('online check-in','onlinecheckin'),('good experience','goodexperience')
,('meal service','mealservice'),('long flight','longflight'),('economy seats','economyseats'),('flight service','flightservice')
,('food service','foodservice'),('return trip','returntrip'),('extra legroom','extralegroom')]

#replace
for item in replace_list:
  replace_text(item[0],item[1])
  print(item[0],item[1])

full_df['review'] = full_df['review'].apply(lambda x: x.split('|')[1] if '|' in x else x)

#dropping the once with same review
full_df.drop_duplicates(subset= 'review',inplace= True)

#adding unique id
full_df['unique_id'] = [i+1 for i in full_df.index]

#save
full_df.to_csv(OUTFILE,index=False)



full_df.info()

